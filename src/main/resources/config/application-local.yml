server:
  port: "${CAWS_PORT}"
  max-http-request-header-size: 48KB
  tomcat:
    uri-encoding: UTF-8
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  forward-headers-strategy: native

spring:
  application:
    name: carp-webservices
    version: 1.2.0
  servlet:
    multipart:
      enabled: true
      max-file-size: 8MB
      max-request-size: 8MB
  output:
    ansi:
      enabled: always

  datasource:
    name: carp_local
    url: "jdbc:postgresql://${PG_HOST}:${PG_PORT}/carp?serverTimezone=UTC&characterEncoding=utf-8"
    username: "${ADMIN_USER}"
    password: "${ADMIN_PASSWORD}"
    driver-class-name: org.postgresql.Driver

    # HikariCP settings
    # https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      driver-class-name: org.postgresql.Driver
      maximum-pool-size: 20
      idle-timeout: 600000
      max-lifetime: 1800000
      minimum-idle: 5
      connection-timeout: 30000
      leak-detection-threshold: 30000
      pool-name: CarpHikariCP

  jpa:
    properties:
      hibernate:
        types:
          print:
            banner: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
    generate-ddl: false
    open-in-view: false

  sql:
    init:
      mode: always

  rabbitmq:
    host: "${RABBIT_HOST}"
    port: "${RABBIT_PORT}"
    username: "${ADMIN_USER}"
    password: "${ADMIN_PASSWORD}"
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1s
          max-attempts: 3
          max-interval: 10s
          multiplier: 3

  mail:
    host: "${MAIL_HOST}"
    port: "${MAIL_PORT}"
    address: "${MAIL_USERNAME}"
    password: "${MAIL_PASSWORD}"
    from: "${MAIL_FROM} <${spring.mail.address}>"
    properties:
      mail.smtp.starttls.enable: true
      mail.smtp.starttls.required: true
      mail.transport.protocol: smtp
      mail.smtp.auth: true
      mail.smtp.connectiontimeout: 60000
      mail.smtp.timeout: 60000
      mail.smtp.writetimeout: 60000

  messages:
    basename: messages/messages
    encoding: UTF-8

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    servlet:
      content-type: text/html
    cache: true

  main:
    banner-mode: off

  flyway:
    enabled: true

  jackson:
    default-property-inclusion: NON_NULL

keycloak:
  auth-server-url: "${KC_URL}"
  realm: Carp
  admin:
    client-id: "${KC_CLIENT_ID}"
    client-secret: "${KC_CLIENT_SECRET}"

com:
  c4-soft:
    springaddons:
      oidc:
        resourceserver:
          permit-all:
            - /actuator/**
            - /swagger-ui/**
            - /v3/api-docs/**
          cors:
            - path: /**
              allowed-origins: "*"
        ops:
          - iss: ${keycloak.auth-server-url}/realms/${keycloak.realm}
            username-claim: preferred_username
            authorities:
              - path: $.realm_access.roles
                prefix: ROLE_
                caze: upper
              - path: $.manage_study
                prefix: manage_study_
              - path: $.in_deployment
                prefix: in_deployment_
              - path: $.protocol_owner
                prefix: protocol_owner_
              - path: $.file_owner
                prefix: file_owner_
              - path: $.consent_owner
                prefix: consent_owner_
              - path: $.collection_owner
                prefix: collection_owner_


springdoc:
  swagger-ui:
    disable-swagger-default-url: true
    url: /${environment.subfolder}/v3/api-docs
    config-url: /${environment.subfolder}/v3/api-docs/swagger-config

rabbit:
  data-point:
    processing:
      queue: data-point-processing-${spring.profiles.active}
      direct-ex: data-point-direct-${spring.profiles.active}
      dlq: ${rabbit.data-point.processing.queue}.dlq
      dlx: ${rabbit.data-point.processing.queue}.dlx
      plq: ${rabbit.data-point.processing.queue}.plq
      plx: ${rabbit.data-point.processing.queue}.plx

  email:
    sending:
      queue: email-sending-queue-${spring.profiles.active}
      direct-ex: email-sending-direct-exchange-${spring.profiles.active}
      dlq: ${rabbit.email.sending.queue}.dlq
      dlx: ${rabbit.email.sending.queue}.dlx
      plq: ${rabbit.email.sending.queue}.plq
      plx: ${rabbit.email.sending.queue}.plx

  third-party:
    processing:
      queue: third-party-queue-${spring.profiles.active}
      direct-ex: third-party-direct-exchange-${spring.profiles.active}
      dlq: ${rabbit.third-party.processing.queue}.dlq
      dlx: ${rabbit.third-party.processing.queue}.dlx
      plq: ${rabbit.third-party.processing.queue}.plq
      plx: ${rabbit.third-party.processing.queue}.plx

  study:
    queue: study-queue-${spring.profiles.active}
    direct-ex: study-direct-exchange-${spring.profiles.active}
    dlq: ${rabbit.study.queue}.dlq
    dlx: ${rabbit.study.queue}.dlx

  deployment:
    queue: deployment-queue-${spring.profiles.active}
    direct-ex: deployment-direct-exchange-${spring.profiles.active}
    dlq: ${rabbit.deployment.queue}.dlq
    dlx: ${rabbit.deployment.queue}.dlx

# s3 settings for image storage
# Future versions of CARP will ship with a self-hosted s3 container
s3:
  space:
    key: "${S3_KEY}"
    secret: "${S3_SECRET}"
    endpoint: "${S3_ENDPOINT}"
    region: "${S3_REGION}"
    bucket: "${S3_BUCKET}"

management:
  endpoints:
    web:
      exposure:
        include: ["health", "info", "prometheus", "metrics"]
  endpoint:
    health:
      cache:
        time-to-live: 5000
      show-details: always

  info:
    build:
      enabled: true
    defaults:
      enabled: true
    env:
      enabled: true

  health:
    defaults:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true

logging:
  level:
    org.hibernate.sql: INFO
    com.zaxxer.hikari.HikariConfig: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
    org.keycloak: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO

teams:
  webhook:
    server: "${TEAMS_SERVER_WEBHOOK_URL}"
    client: "${TEAMS_CLIENT_WEBHOOK_URL}"
    heartbeat: "${TEAMS_HEARTBEAT_WEBHOOK_URL}"
    dev: "${TEAMS_DEV_WEBHOOK_URL}"

storage:
  directory: /home/carp/storage/${spring.profiles.active}/
  exports:
    expiration:
      enabled: true
      days: 90

environment:
  url: "${CAWS_URL}"
  portalUrl: "${CAWS_PORTAL_URL}"

alert:
  # The email address to send alerts to
  admin-email: "${CAWS_ADMIN_EMAIL}"
  subject: WARNING! DATABASE CONNECTION PROBLEMS!

info:
  app:
    name: ${spring.application.name}
    description: This is CARP Webservices API.
    version: ${spring.application.version}
    java:
      version: 17
    environment: ${spring.profiles.active}